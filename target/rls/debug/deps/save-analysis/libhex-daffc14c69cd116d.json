{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0","program":"/Users/taharahiroki/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--edition=2018","--crate-name","hex","/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=daffc14c69cd116d","-C","extra-filename=-daffc14c69cd116d","--out-dir","/Users/taharahiroki/secret_account_test/target/rls/debug/deps","-L","dependency=/Users/taharahiroki/secret_account_test/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/taharahiroki/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/taharahiroki/secret_account_test/target/rls/debug/deps/libhex-daffc14c69cd116d.rmeta"},"prelude":{"crate_id":{"name":"hex","disambiguator":[17618577838576613798,13496610615039947931]},"crate_root":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src","external_crates":[{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[5023031535946102806,1519945200772436769]}},{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14971710667112632204,3779288994815239424]}},{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13929365297553886769,10835487607786681578]}},{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[1703814022776569128,10551764917560457909]}},{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[10905289896639819248,12378153447800695556]}},{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[9875817922157896832,6525866999979462444]}},{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16327553567805037396,13803445574918473825]}},{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[8522830685719941355,5926318803845271184]}},{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[1264957467986197796,4307507407817205004]}},{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[14209462635893683258,5261725291371373837]}},{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[17767136569084421189,11517709274149150814]}},{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[6927829448697524174,8965120119738204078]}},{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[16003526636929696339,16081502929097916775]}},{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[15776410874500773192,14769858709110954983]}}],"span":{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","byte_start":0,"byte_end":12851,"line_start":1,"line_end":461,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","byte_start":0,"byte_end":12851,"line_start":1,"line_end":461,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":19},{"krate":0,"index":21},{"krate":0,"index":23},{"krate":0,"index":29},{"krate":0,"index":33},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":45},{"krate":0,"index":74},{"krate":0,"index":88},{"krate":0,"index":86},{"krate":0,"index":85},{"krate":0,"index":82},{"krate":0,"index":51},{"krate":0,"index":53},{"krate":0,"index":55},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":65},{"krate":0,"index":90},{"krate":0,"index":96},{"krate":0,"index":102},{"krate":0,"index":108},{"krate":0,"index":114},{"krate":0,"index":120},{"krate":0,"index":126},{"krate":0,"index":132},{"krate":0,"index":138},{"krate":0,"index":144},{"krate":0,"index":150},{"krate":0,"index":156},{"krate":0,"index":162},{"krate":0,"index":168},{"krate":0,"index":174},{"krate":0,"index":180},{"krate":0,"index":186},{"krate":0,"index":192},{"krate":0,"index":198},{"krate":0,"index":204},{"krate":0,"index":210},{"krate":0,"index":216},{"krate":0,"index":222},{"krate":0,"index":228},{"krate":0,"index":234},{"krate":0,"index":240},{"krate":0,"index":246},{"krate":0,"index":252},{"krate":0,"index":258},{"krate":0,"index":264},{"krate":0,"index":270},{"krate":0,"index":276},{"krate":0,"index":282},{"krate":0,"index":288},{"krate":0,"index":294},{"krate":0,"index":300},{"krate":0,"index":306},{"krate":0,"index":312},{"krate":0,"index":318},{"krate":0,"index":324},{"krate":0,"index":330},{"krate":0,"index":336},{"krate":0,"index":342},{"krate":0,"index":348},{"krate":0,"index":354},{"krate":0,"index":360},{"krate":0,"index":366},{"krate":0,"index":372},{"krate":0,"index":378},{"krate":0,"index":384},{"krate":0,"index":390},{"krate":0,"index":396},{"krate":0,"index":402},{"krate":0,"index":408},{"krate":0,"index":414},{"krate":0,"index":420},{"krate":0,"index":426},{"krate":0,"index":432},{"krate":0,"index":438},{"krate":0,"index":444},{"krate":0,"index":450},{"krate":0,"index":456},{"krate":0,"index":462},{"krate":0,"index":468},{"krate":0,"index":474},{"krate":0,"index":480},{"krate":0,"index":486},{"krate":0,"index":492},{"krate":0,"index":498},{"krate":0,"index":504},{"krate":0,"index":510},{"krate":0,"index":516},{"krate":0,"index":522},{"krate":0,"index":528},{"krate":0,"index":534},{"krate":0,"index":540},{"krate":0,"index":546},{"krate":0,"index":552},{"krate":0,"index":558},{"krate":0,"index":564},{"krate":0,"index":570},{"krate":0,"index":576},{"krate":0,"index":582},{"krate":0,"index":588},{"krate":0,"index":594},{"krate":0,"index":600},{"krate":0,"index":606},{"krate":0,"index":612},{"krate":0,"index":618},{"krate":0,"index":624},{"krate":0,"index":630},{"krate":0,"index":636},{"krate":0,"index":642},{"krate":0,"index":648},{"krate":0,"index":654},{"krate":0,"index":660},{"krate":0,"index":666},{"krate":0,"index":672},{"krate":0,"index":678},{"krate":0,"index":684},{"krate":0,"index":690},{"krate":0,"index":696},{"krate":0,"index":702},{"krate":0,"index":708},{"krate":0,"index":714},{"krate":0,"index":720},{"krate":0,"index":726},{"krate":0,"index":732},{"krate":0,"index":738},{"krate":0,"index":744},{"krate":0,"index":750},{"krate":0,"index":756},{"krate":0,"index":762},{"krate":0,"index":768},{"krate":0,"index":774},{"krate":0,"index":780},{"krate":0,"index":786},{"krate":0,"index":792},{"krate":0,"index":798},{"krate":0,"index":804},{"krate":0,"index":810},{"krate":0,"index":816},{"krate":0,"index":822},{"krate":0,"index":828},{"krate":0,"index":834},{"krate":0,"index":840},{"krate":0,"index":846},{"krate":0,"index":852},{"krate":0,"index":858},{"krate":0,"index":864},{"krate":0,"index":870},{"krate":0,"index":876},{"krate":0,"index":882},{"krate":0,"index":888},{"krate":0,"index":894},{"krate":0,"index":900},{"krate":0,"index":906},{"krate":0,"index":912},{"krate":0,"index":918},{"krate":0,"index":924},{"krate":0,"index":930},{"krate":0,"index":936},{"krate":0,"index":942},{"krate":0,"index":948},{"krate":0,"index":954},{"krate":0,"index":960},{"krate":0,"index":966},{"krate":0,"index":972},{"krate":0,"index":978},{"krate":0,"index":984},{"krate":0,"index":990},{"krate":0,"index":996},{"krate":0,"index":1002},{"krate":0,"index":1008},{"krate":0,"index":1014},{"krate":0,"index":1020},{"krate":0,"index":1026},{"krate":0,"index":1032},{"krate":0,"index":1038},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":72}],"decl_id":null,"docs":" Encoding and decoding hex strings.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":14},"span":{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","byte_start":1477,"byte_end":1482,"line_start":51,"line_end":51,"column_start":11,"column_end":16},"name":"ToHex","qualname":"::ToHex","value":"ToHex","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":17}],"decl_id":null,"docs":" Encoding values as hex string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","byte_start":1612,"byte_end":1622,"line_start":54,"line_end":54,"column_start":8,"column_end":18},"name":"encode_hex","qualname":"::ToHex::encode_hex","value":"fn <T> (&self) -> T","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Encode the hex strict representing `self` into the result.. Lower case\n letters are used (e.g. `f9b4ca`)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","byte_start":1793,"byte_end":1809,"line_start":58,"line_end":58,"column_start":8,"column_end":24},"name":"encode_hex_upper","qualname":"::ToHex::encode_hex_upper","value":"fn <T> (&self) -> T","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Encode the hex strict representing `self` into the result.. Lower case\n letters are used (e.g. `F9B4CA`)\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":75},"span":{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","byte_start":3892,"byte_end":3911,"line_start":133,"line_end":133,"column_start":5,"column_end":24},"name":"InvalidHexCharacter","qualname":"::FromHexError::InvalidHexCharacter","value":"FromHexError::InvalidHexCharacter { c, index }","parent":{"krate":0,"index":74},"children":[],"decl_id":null,"docs":" An invalid character was found. Valid ones are: `0...9`, `a...f`\n or `A...F`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":78},"span":{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","byte_start":4059,"byte_end":4068,"line_start":140,"line_end":140,"column_start":5,"column_end":14},"name":"OddLength","qualname":"::FromHexError::OddLength","value":"FromHexError::OddLength","parent":{"krate":0,"index":74},"children":[],"decl_id":null,"docs":" A hex string's length needs to be even, as two digits correspond to\n one byte.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":80},"span":{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","byte_start":4241,"byte_end":4260,"line_start":145,"line_end":145,"column_start":5,"column_end":24},"name":"InvalidStringLength","qualname":"::FromHexError::InvalidStringLength","value":"FromHexError::InvalidStringLength","parent":{"krate":0,"index":74},"children":[],"decl_id":null,"docs":" If the hex string is decoded into a fixed sized container, such as an\n array, the hex string's length * 2 has to match the container's\n length.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":74},"span":{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","byte_start":3780,"byte_end":3792,"line_start":130,"line_end":130,"column_start":10,"column_end":22},"name":"FromHexError","qualname":"::FromHexError","value":"FromHexError::{InvalidHexCharacter, OddLength, InvalidStringLength}","parent":null,"children":[{"krate":0,"index":75},{"krate":0,"index":78},{"krate":0,"index":80}],"decl_id":null,"docs":" The error type for decoding a hex string into `Vec<u8>` or `[u8; N]`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":55},"span":{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","byte_start":5529,"byte_end":5536,"line_start":193,"line_end":193,"column_start":11,"column_end":18},"name":"FromHex","qualname":"::FromHex","value":"FromHex: Sized","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57}],"decl_id":null,"docs":" Types that can be decoded from a hex string.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":56},"span":{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","byte_start":5555,"byte_end":5560,"line_start":194,"line_end":194,"column_start":10,"column_end":15},"name":"Error","qualname":"::FromHex::Error","value":"type Error;","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","byte_start":5839,"byte_end":5847,"line_start":201,"line_end":201,"column_start":8,"column_end":16},"name":"from_hex","qualname":"::FromHex::from_hex","value":"fn <T> (hex: T) -> Result<Self, Self::Error>","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" Creates an instance of type `Self` from the given hex string, or fails\n with a custom error type.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":66},"span":{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","byte_start":8528,"byte_end":8534,"line_start":286,"line_end":286,"column_start":8,"column_end":14},"name":"encode","qualname":"::encode","value":"fn <T> (data: T) -> String","parent":null,"children":[],"decl_id":null,"docs":" Encodes `data` as hex string using lowercase characters.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":68},"span":{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","byte_start":8933,"byte_end":8945,"line_start":300,"line_end":300,"column_start":8,"column_end":20},"name":"encode_upper","qualname":"::encode_upper","value":"fn <T> (data: T) -> String","parent":null,"children":[],"decl_id":null,"docs":" Encodes `data` as hex string using uppercase characters.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":70},"span":{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","byte_start":9500,"byte_end":9506,"line_start":319,"line_end":319,"column_start":8,"column_end":14},"name":"decode","qualname":"::decode","value":"fn <T> (data: T) -> Result<Vec<u8>, FromHexError>","parent":null,"children":[],"decl_id":null,"docs":" Decodes a hex string into raw bytes.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":72},"span":{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","byte_start":10001,"byte_end":10016,"line_start":334,"line_end":334,"column_start":8,"column_end":23},"name":"decode_to_slice","qualname":"::decode_to_slice","value":"fn <T> (data: T, out: &mut [u8]) -> Result<(), FromHexError>","parent":null,"children":[],"decl_id":null,"docs":" Decode a hex string into a mutable bytes slice.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","byte_start":2103,"byte_end":2118,"line_start":70,"line_end":70,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","byte_start":2347,"byte_end":2362,"line_start":80,"line_end":80,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","byte_start":2982,"byte_end":2997,"line_start":102,"line_end":102,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","byte_start":3398,"byte_end":3399,"line_start":118,"line_end":118,"column_start":32,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":49}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","byte_start":4316,"byte_end":4328,"line_start":149,"line_end":149,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","byte_start":4645,"byte_end":4657,"line_start":160,"line_end":160,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","byte_start":6272,"byte_end":6275,"line_start":218,"line_end":218,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":61},{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","byte_start":2103,"byte_end":2118,"line_start":70,"line_end":70,"column_start":10,"column_end":25},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":23},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","byte_start":2347,"byte_end":2362,"line_start":80,"line_end":80,"column_start":23,"column_end":38},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":23},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","byte_start":2982,"byte_end":2997,"line_start":102,"line_end":102,"column_start":38,"column_end":53},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":23},"to":{"krate":2,"index":3796}},{"span":{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","byte_start":3398,"byte_end":3399,"line_start":118,"line_end":118,"column_start":32,"column_end":33},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":46},"to":{"krate":0,"index":14}},{"span":{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","byte_start":4316,"byte_end":4328,"line_start":149,"line_end":149,"column_start":28,"column_end":40},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":74},"to":{"krate":1,"index":1623}},{"span":{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","byte_start":4645,"byte_end":4657,"line_start":160,"line_end":160,"column_start":23,"column_end":35},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":74},"to":{"krate":2,"index":7484}},{"span":{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","byte_start":5538,"byte_end":5543,"line_start":193,"line_end":193,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":1539},"to":{"krate":0,"index":55}},{"span":{"file_name":"/Users/taharahiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.0/src/lib.rs","byte_start":6272,"byte_end":6275,"line_start":218,"line_end":218,"column_start":18,"column_end":21},"kind":{"Impl":{"id":6}},"from":{"krate":5,"index":3763},"to":{"krate":0,"index":55}}]}